[sqlfluff]
templater = jinja
sql_file_exts = .sql
max_line_length = 300
indent_unit = space
dialect = snowflake
verbose = 2
large_file_skip_byte_limit = 40000
exclude_rules = structure.column_order

[sqlfluff:indentation]
tab_space_size = 4

[sqlfluff:layout:type:comma]
spacing_before = touch
line_position = leading

[sqlfluff:rules:capitalisation.keywords] 
capitalisation_policy = lower

[sqlfluff:rules:aliasing.table]
aliasing = explicit

[sqlfluff:rules:aliasing.column]
aliasing = explicit

[sqlfluff:rules:aliasing.expression]
allow_scalar = False

[sqlfluff:rules:capitalisation.identifiers]
extended_capitalisation_policy = lower

[sqlfluff:rules:capitalisation.functions]
capitalisation_policy = lower

[sqlfluff:rules:capitalisation.literals]
capitalisation_policy = lower

[sqlfluff:rules:references.keywords]
ignore_words = first_name, last_name, email

[sqlfluff:rules:ambiguous.column_references]  # Number in group by
group_by_and_order_by_style = implicit

[sqlfluff:templater:jinja]
# Make dbt default macros like available like `ref`
apply_dbt_builtins = true

# Load custom macros from the macro directory
load_macros_from_path = ./macros/

# Allow mocking dbt_utils and other packages through
# python files placed in this dir
library_path = ./sqlfluff_libs/

# Mock variables that are used in dbt
[sqlfluff:templater:jinja:context]
target = dev

# Mock some macros that are used in dbt without package names
[sqlfluff:templater:jinja:macros]
metric = {% macro metric(name) %}'{{name}}'{% endmacro %}
generate_user_id = {% macro generate_user_id(name_1, name_2) %}'{{name_1}}'{% endmacro %}
